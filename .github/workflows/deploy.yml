name: Deploy to AWS

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json
    
    - name: Install dependencies
      run: |
        cd backend
        npm ci
    
    - name: Run tests
      run: |
        cd backend
        npm test --if-present

  deploy:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-southeast-1
    
    - name: Create deployment package
      run: |
        # Create deployment directory
        mkdir -p deploy
        
        # Copy application files (exclude development files)
        rsync -av --exclude='.git' --exclude='node_modules' --exclude='*.log' --exclude='.DS_Store' --exclude='deploy' ./ deploy/
        
        # Create deployment script
        cat > deploy/deploy.sh << 'EOF'
        #!/bin/bash
        set -e
        
        echo "🚀 Starting deployment..."
        
        # Navigate to application directory
        cd /var/www/MyDigitalSpace
        
        # Backup current version
        sudo cp -r . ../MyDigitalSpace-backup-$(date +%Y%m%d-%H%M%S) || true
        
        # Stop services
        pm2 stop mydigitalspace-backend || true
        
        # Update application files
        sudo rsync -av --delete /tmp/mydigitalspace-deploy/ ./ --exclude=database/ --exclude=node_modules/
        sudo chown -R ubuntu:ubuntu /var/www/MyDigitalSpace
        
        # Install/update dependencies
        cd backend
        npm install --production
        
        # Run database migrations if needed
        node scripts/add-users.js || true
        
        # Restart services
        pm2 start server-sqlite.js --name mydigitalspace-backend || pm2 restart mydigitalspace-backend
        pm2 save
        
        # Test deployment
        sleep 5
        curl -f http://localhost:3001/health || exit 1
        
        echo "✅ Deployment completed successfully!"
        EOF
        
        chmod +x deploy/deploy.sh
        
        # Create archive
        tar -czf mydigitalspace-deploy.tar.gz -C deploy .
    
    - name: Send SSH public key to instance
      run: |
        aws ec2-instance-connect send-ssh-public-key \
          --instance-id ${{ secrets.AWS_INSTANCE_ID }} \
          --instance-os-user ubuntu \
          --ssh-public-key "${{ secrets.SSH_PUBLIC_KEY }}" \
          --availability-zone ap-southeast-1a
    
    - name: Deploy to AWS EC2
      run: |
        # Setup SSH
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        
        # Add instance to known hosts
        ssh-keyscan -H ${{ secrets.AWS_INSTANCE_IP }} >> ~/.ssh/known_hosts
        
        # Upload deployment package
        scp -o ConnectTimeout=30 -o StrictHostKeyChecking=no mydigitalspace-deploy.tar.gz ubuntu@${{ secrets.AWS_INSTANCE_IP }}:/tmp/
        
        # Extract and deploy
        ssh -o ConnectTimeout=30 -o StrictHostKeyChecking=no ubuntu@${{ secrets.AWS_INSTANCE_IP }} << 'ENDSSH'
          set -e
          cd /tmp
          
          # Extract deployment package
          rm -rf mydigitalspace-deploy
          tar -xzf mydigitalspace-deploy.tar.gz -C /tmp
          mv mydigitalspace-deploy /tmp/mydigitalspace-deploy
          
          # Run deployment script
          chmod +x /tmp/mydigitalspace-deploy/deploy.sh
          /tmp/mydigitalspace-deploy/deploy.sh
          
          # Cleanup
          rm -rf /tmp/mydigitalspace-deploy*
        ENDSSH
    
    - name: Verify deployment
      run: |
        # Wait for service to be ready
        sleep 10
        
        # Test endpoints
        curl -f http://${{ secrets.AWS_INSTANCE_IP }}/health
        curl -f http://${{ secrets.AWS_INSTANCE_IP }}/api/health || curl -f http://${{ secrets.AWS_INSTANCE_IP }}/health
        
        echo "🎉 Deployment verification successful!"
    
    - name: Notify deployment status
      if: always()
      run: |
        if [ ${{ job.status }} == 'success' ]; then
          echo "✅ Deployment to app.daviszhang.me completed successfully!"
        else
          echo "❌ Deployment failed!"
          exit 1
        fi