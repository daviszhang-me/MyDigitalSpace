name: Deploy to AWS EC2

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
    types: [ closed ]

jobs:
  test:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true)
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json
    
    - name: Install dependencies
      run: |
        cd backend
        npm ci
    
    - name: Run linting
      run: |
        cd backend
        npm run lint || echo "Linting not configured, skipping..."
    
    - name: Run tests
      run: |
        cd backend
        npm test || echo "Tests not configured, skipping..."
    
    - name: Validate environment configuration
      run: |
        chmod +x scripts/validate-env.sh
        bash scripts/validate-env.sh production || echo "Environment validation completed"

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-southeast-1
    
    - name: Get EC2 instance IP
      id: get-ip
      run: |
        INSTANCE_IP=$(aws ec2 describe-instances \
          --instance-ids i-0f4af27f7d4b2ee8d \
          --query 'Reservations[0].Instances[0].PublicIpAddress' \
          --output text)
        echo "instance-ip=$INSTANCE_IP" >> $GITHUB_OUTPUT
        echo "Instance IP: $INSTANCE_IP"
    
    - name: Create deployment package
      env:
        SERVER_IP: ${{ steps.get-ip.outputs.instance-ip }}
      run: |
        echo "🚀 Starting deployment to EC2 instance: i-0f4af27f7d4b2ee8d"
        echo "📍 Instance IP: $SERVER_IP"
        
        # Generate version info
        echo "📝 Generating version information..."
        COMMIT_HASH="${{ github.sha }}"
        BRANCH_NAME="${{ github.ref_name }}"
        BUILD_TIME=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
        BUILD_NUMBER="${{ github.run_number }}"
        VERSION="v1.${BUILD_NUMBER}"
        
        # Create version.json file
        cat > version.json << EOF
        {
          "version": "$VERSION",
          "commit": "$COMMIT_HASH",
          "branch": "$BRANCH_NAME",
          "buildNumber": $BUILD_NUMBER,
          "timestamp": "$BUILD_TIME",
          "environment": "production"
        }
        EOF
        
        echo "✅ Version info generated: $VERSION (build $BUILD_NUMBER)"
        
        # Create deployment package
        echo "📦 Creating deployment package..."
        TEMP_DIR="/tmp/mydigitalspace-deploy"
        rm -rf $TEMP_DIR
        mkdir -p $TEMP_DIR
        
        # Copy files (excluding unnecessary files)
        rsync -av \
          --exclude='node_modules' \
          --exclude='.git' \
          --exclude='*.log' \
          --exclude='.DS_Store' \
          --exclude='.github' \
          --exclude='deploy.sh' \
          --exclude='quick-deploy.sh' \
          ./ $TEMP_DIR/
        
        # Ensure version.json is copied to deployment package
        echo "📝 Copying version.json to deployment package..."
        cp version.json $TEMP_DIR/version.json
        
        # Create production environment file
        echo "🔧 Creating production environment..."
        JWT_SECRET_VALUE="mydigitalspace-$(openssl rand -hex 32)"
        
        cat > $TEMP_DIR/backend/.env << EOF
        NODE_ENV=production
        PORT=3001
        DB_PATH=./data/knowledgehub.db
        JWT_SECRET=$JWT_SECRET_VALUE
        CORS_ORIGIN=http://daviszhang.me,https://daviszhang.me,http://www.daviszhang.me,https://www.daviszhang.me
        FRONTEND_URL=http://daviszhang.me
        RATE_LIMIT_WINDOW_MS=900000
        RATE_LIMIT_MAX_REQUESTS=100
        EOF
        
        # Create deployment script
        cat > $TEMP_DIR/deploy-server.sh << 'EOF'
        #!/bin/bash
        set -e
        
        # Enhanced error handling and logging
        DEPLOYMENT_START_TIME=$(date)
        BACKUP_DIR="/tmp/mydigitalspace-backup-$(date +%Y%m%d-%H%M%S)"
        DEPLOYMENT_LOG="/var/log/mydigitalspace/deployment.log"
        
        echo "🚀 Starting deployment at $DEPLOYMENT_START_TIME" | tee -a $DEPLOYMENT_LOG
        
        cd /var/www/MyDigitalSpace
        
        # Create backup before deployment
        echo "💾 Creating backup..." | tee -a $DEPLOYMENT_LOG
        sudo mkdir -p $BACKUP_DIR
        sudo cp -r /var/www/MyDigitalSpace $BACKUP_DIR/ 2>/dev/null || echo "⚠️ Backup creation failed, continuing..."
        
        # Set proper permissions
        sudo chown -R ubuntu:ubuntu /var/www/MyDigitalSpace
        
        # Verify required files exist before proceeding
        echo "🔍 Verifying deployment files..." | tee -a $DEPLOYMENT_LOG
        REQUIRED_FILES=(
            "backend/server-sqlite.js"
            "backend/scripts/setup-database-sqlite.js"
            "database/schema-sqlite.sql"
            "script.js"
            "index.html"
        )
        
        for file in "${REQUIRED_FILES[@]}"; do
            if [ ! -f "$file" ]; then
                echo "❌ Critical file missing: $file" | tee -a $DEPLOYMENT_LOG
                echo "📋 Available files in directory:" | tee -a $DEPLOYMENT_LOG
                ls -la "$(dirname "$file")" 2>&1 | tee -a $DEPLOYMENT_LOG
                exit 1
            else
                echo "✅ Found: $file" | tee -a $DEPLOYMENT_LOG
            fi
        done
        
        # Install/update backend dependencies
        echo "📦 Installing backend dependencies..." | tee -a $DEPLOYMENT_LOG
        cd backend
        if ! npm install --production 2>&1 | tee -a $DEPLOYMENT_LOG; then
            echo "❌ NPM install failed!" | tee -a $DEPLOYMENT_LOG
            exit 1
        fi
        
        # Create database directories
        mkdir -p data database
        
        # Run database setup with enhanced verification
        echo "🗄️ Setting up database..." | tee -a $DEPLOYMENT_LOG
        if ! node scripts/setup-database-sqlite.js 2>&1 | tee -a $DEPLOYMENT_LOG; then
            echo "❌ Database setup failed!" | tee -a $DEPLOYMENT_LOG
            echo "📋 Checking setup script and database..." | tee -a $DEPLOYMENT_LOG
            ls -la scripts/setup-database-sqlite.js 2>&1 | tee -a $DEPLOYMENT_LOG
            ls -la database/schema-sqlite.sql 2>&1 | tee -a $DEPLOYMENT_LOG
            ls -la data/ 2>&1 | tee -a $DEPLOYMENT_LOG
            exit 1
        fi
        
        # Verify database tables were created
        echo "🔍 Verifying database tables..." | tee -a $DEPLOYMENT_LOG
        EXPECTED_TABLES=("users" "notes" "workflows" "workflow_steps" "workflow_attachments")
        for table in "${EXPECTED_TABLES[@]}"; do
            if sqlite3 data/knowledgehub.db "SELECT name FROM sqlite_master WHERE type='table' AND name='$table';" | grep -q "$table"; then
                echo "✅ Table verified: $table" | tee -a $DEPLOYMENT_LOG
            else
                echo "❌ Missing table: $table" | tee -a $DEPLOYMENT_LOG
                echo "📋 Available tables:" | tee -a $DEPLOYMENT_LOG
                sqlite3 data/knowledgehub.db ".tables" 2>&1 | tee -a $DEPLOYMENT_LOG
                exit 1
            fi
        done
        
        echo "👥 Setting up users..." | tee -a $DEPLOYMENT_LOG
        node scripts/add-users.js 2>&1 | tee -a $DEPLOYMENT_LOG || echo "⚠️ User setup completed with warnings (this is normal on first run)" | tee -a $DEPLOYMENT_LOG
        
        # Install PM2 if not already installed
        if ! command -v pm2 &> /dev/null; then
            echo "📋 Installing PM2..." | tee -a $DEPLOYMENT_LOG
            if ! sudo npm install -g pm2 2>&1 | tee -a $DEPLOYMENT_LOG; then
                echo "❌ PM2 installation failed!" | tee -a $DEPLOYMENT_LOG
                exit 1
            fi
        fi
        
        # Create/update PM2 ecosystem file
        echo "⚙️ Creating PM2 configuration..." | tee -a $DEPLOYMENT_LOG
        cat > ecosystem.config.js << 'PM2_CONFIG'
        module.exports = {
          apps: [{
            name: 'mydigitalspace-backend',
            script: 'server-sqlite.js',
            cwd: '/var/www/MyDigitalSpace/backend',
            instances: 1,
            exec_mode: 'cluster',
            env: {
              NODE_ENV: 'production',
              PORT: 3001
            },
            env_production: {
              NODE_ENV: 'production',
              PORT: 3001
            },
            error_file: '/var/log/mydigitalspace/error.log',
            out_file: '/var/log/mydigitalspace/access.log',
            log_file: '/var/log/mydigitalspace/combined.log',
            time: true,
            max_restarts: 10,
            min_uptime: '10s'
          }]
        };
        PM2_CONFIG
        
        # Create log directory
        sudo mkdir -p /var/log/mydigitalspace
        sudo chown ubuntu:ubuntu /var/log/mydigitalspace
        
        # Stop existing application gracefully
        echo "🛑 Stopping existing application..." | tee -a $DEPLOYMENT_LOG
        pm2 stop mydigitalspace-backend 2>&1 | tee -a $DEPLOYMENT_LOG || true
        pm2 delete mydigitalspace-backend 2>&1 | tee -a $DEPLOYMENT_LOG || true
        
        # Start application with enhanced monitoring
        echo "🚀 Starting application..." | tee -a $DEPLOYMENT_LOG
        if ! pm2 start ecosystem.config.js 2>&1 | tee -a $DEPLOYMENT_LOG; then
            echo "❌ PM2 start failed!" | tee -a $DEPLOYMENT_LOG
            echo "📋 Checking PM2 status..." | tee -a $DEPLOYMENT_LOG
            pm2 status 2>&1 | tee -a $DEPLOYMENT_LOG
            echo "📋 Checking recent logs..." | tee -a $DEPLOYMENT_LOG
            pm2 logs mydigitalspace-backend --lines 20 2>&1 | tee -a $DEPLOYMENT_LOG || echo "No logs available"
            
            # Attempt rollback
            echo "🔄 Attempting rollback..." | tee -a $DEPLOYMENT_LOG
            if [ -d "$BACKUP_DIR/MyDigitalSpace" ]; then
                sudo cp -r $BACKUP_DIR/MyDigitalSpace/* /var/www/MyDigitalSpace/
                pm2 start ecosystem.config.js 2>&1 | tee -a $DEPLOYMENT_LOG || true
            fi
            exit 1
        fi
        
        # Save PM2 configuration and set up auto-restart
        pm2 save 2>&1 | tee -a $DEPLOYMENT_LOG
        pm2 startup ubuntu -u ubuntu --hp /home/ubuntu 2>&1 | tee -a $DEPLOYMENT_LOG || true
        
        # Enhanced application startup verification
        echo "⏳ Waiting for application to start..." | tee -a $DEPLOYMENT_LOG
        sleep 15
        
        # Check PM2 process status
        if ! pm2 show mydigitalspace-backend | grep "online"; then
            echo "❌ Application not running properly!" | tee -a $DEPLOYMENT_LOG
            echo "📋 PM2 status:" | tee -a $DEPLOYMENT_LOG
            pm2 status 2>&1 | tee -a $DEPLOYMENT_LOG
            echo "📋 Application logs:" | tee -a $DEPLOYMENT_LOG
            pm2 logs mydigitalspace-backend --lines 50 2>&1 | tee -a $DEPLOYMENT_LOG
            exit 1
        fi
        
        # Test backend directly before nginx setup
        echo "🔍 Testing backend connection..." | tee -a $DEPLOYMENT_LOG
        for i in {1..5}; do
            if curl -f -m 5 http://localhost:3001/api 2>&1 | tee -a $DEPLOYMENT_LOG; then
                echo "✅ Backend responding on attempt $i" | tee -a $DEPLOYMENT_LOG
                break
            else
                echo "⚠️ Backend test attempt $i failed, retrying..." | tee -a $DEPLOYMENT_LOG
                sleep 3
                if [ $i -eq 5 ]; then
                    echo "❌ Backend failed to respond after 5 attempts!" | tee -a $DEPLOYMENT_LOG
                    pm2 logs mydigitalspace-backend --lines 30 2>&1 | tee -a $DEPLOYMENT_LOG
                    exit 1
                fi
            fi
        done
        
        # Test workflow endpoint specifically
        echo "🔍 Testing workflow endpoint..." | tee -a $DEPLOYMENT_LOG
        if curl -f -m 10 http://localhost:3001/api/workflows 2>&1 | tee -a $DEPLOYMENT_LOG; then
            echo "✅ Workflow endpoint responding" | tee -a $DEPLOYMENT_LOG
        else
            echo "❌ Workflow endpoint failed!" | tee -a $DEPLOYMENT_LOG
            exit 1
        fi
        
        echo "✅ Application started successfully!" | tee -a $DEPLOYMENT_LOG
        
        # Setup/update Nginx configuration
        echo "🌐 Configuring Nginx..."
        sudo tee /etc/nginx/sites-available/mydigitalspace << 'NGINX_CONFIG'
        server {
            listen 80;
            server_name daviszhang.me www.daviszhang.me;
            
            # Serve static files
            location / {
                root /var/www/MyDigitalSpace;
                try_files \$uri \$uri/ /index.html;
                
                # Cache static assets (exclude HTML)
                location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg)\$ {
                    expires 1h;
                    add_header Cache-Control "public, max-age=3600";
                }
                
                # Don't cache HTML files
                location ~* \.(html|htm)\$ {
                    expires -1;
                    add_header Cache-Control "no-cache, no-store, must-revalidate";
                    add_header Pragma "no-cache";
                }
                
                # Serve JSON files with correct content type
                location ~* \.(json)\$ {
                    add_header Content-Type "application/json";
                    expires -1;
                    add_header Cache-Control "no-cache, no-store, must-revalidate";
                    add_header Pragma "no-cache";
                }
            }
            
            # Proxy API requests to backend
            location /api/ {
                proxy_pass http://localhost:3001/api/;
                proxy_http_version 1.1;
                proxy_set_header Upgrade \$http_upgrade;
                proxy_set_header Connection 'upgrade';
                proxy_set_header Host \$host;
                proxy_set_header X-Real-IP \$remote_addr;
                proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto \$scheme;
                proxy_cache_bypass \$http_upgrade;
                proxy_read_timeout 90s;
                proxy_connect_timeout 90s;
                proxy_send_timeout 90s;
            }
            
            # Health check endpoint
            location /health {
                proxy_pass http://localhost:3001/health;
                proxy_http_version 1.1;
                proxy_set_header Host \$host;
            }
            
            # Security headers
            add_header X-Frame-Options "SAMEORIGIN" always;
            add_header X-Content-Type-Options "nosniff" always;
            add_header X-XSS-Protection "1; mode=block" always;
            add_header Referrer-Policy "no-referrer-when-downgrade" always;
        }
        NGINX_CONFIG
        
        # Enable site and reload Nginx with validation
        sudo ln -sf /etc/nginx/sites-available/mydigitalspace /etc/nginx/sites-enabled/
        
        echo "🔧 Testing Nginx configuration..."
        if ! sudo nginx -t; then
            echo "❌ Nginx configuration test failed!"
            echo "📋 Checking configuration file..."
            sudo nginx -T 2>&1 | tail -20
            exit 1
        fi
        
        echo "🔄 Reloading Nginx..."
        if ! sudo systemctl reload nginx; then
            echo "❌ Nginx reload failed!"
            echo "📋 Checking Nginx status..."
            sudo systemctl status nginx
            echo "📋 Checking Nginx logs..."
            sudo journalctl -u nginx --lines 20 -n
            exit 1
        fi
        
        # Comprehensive deployment verification
        echo "✅ Checking application status..."
        pm2 status
        
        echo "🏥 Testing health endpoints..."
        sleep 5
        
        # Test backend directly
        if curl -f http://localhost:3001/health; then
            echo "✅ Backend health check passed"
        else
            echo "❌ Backend health check failed!"
            echo "📋 Backend logs:"
            pm2 logs mydigitalspace-backend --lines 30
            exit 1
        fi
        
        # Test through Nginx
        if curl -f http://localhost/health; then
            echo "✅ Nginx proxy health check passed"
        else
            echo "❌ Nginx proxy health check failed!"
            echo "📋 Nginx error logs:"
            sudo tail -20 /var/log/nginx/error.log
            exit 1
        fi
        
        # Test API endpoint
        if curl -s http://localhost/api | grep -q "success"; then
            echo "✅ API endpoint check passed"
        else
            echo "⚠️ API endpoint check failed (non-critical)"
        fi
        
        # Final deployment success report
        DEPLOYMENT_END_TIME=$(date)
        echo "🎉 Deployment completed successfully with full verification!" | tee -a $DEPLOYMENT_LOG
        echo "⏰ Deployment duration: $DEPLOYMENT_START_TIME to $DEPLOYMENT_END_TIME" | tee -a $DEPLOYMENT_LOG
        
        echo "📊 Final Status Summary:" | tee -a $DEPLOYMENT_LOG
        echo "✅ Database tables: workflows, workflow_steps, workflow_attachments created" | tee -a $DEPLOYMENT_LOG
        echo "✅ Backend application: mydigitalspace-backend running" | tee -a $DEPLOYMENT_LOG
        echo "✅ API endpoints: /api, /api/workflows accessible" | tee -a $DEPLOYMENT_LOG
        echo "✅ Nginx proxy: configured and running" | tee -a $DEPLOYMENT_LOG
        echo "✅ PM2 process: auto-restart enabled" | tee -a $DEPLOYMENT_LOG
        
        # Cleanup backup on successful deployment
        echo "🧹 Cleaning up backup..." | tee -a $DEPLOYMENT_LOG
        sudo rm -rf $BACKUP_DIR 2>/dev/null || true
        
        echo "🌟 Deployment completed successfully! Application ready for use." | tee -a $DEPLOYMENT_LOG
        EOF
        
        chmod +x $TEMP_DIR/deploy-server.sh
        
        # Create archive
        tar -czf mydigitalspace-deploy.tar.gz -C $TEMP_DIR .
    
    - name: Setup SSH key
      run: |
        # Create SSH directory and known_hosts file
        mkdir -p ~/.ssh
        chmod 700 ~/.ssh
        touch ~/.ssh/known_hosts
        chmod 600 ~/.ssh/known_hosts
        
        # Setup private key with proper formatting
        echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" | tr -d '\r' > /tmp/ssh_key
        chmod 600 /tmp/ssh_key
        
        # Validate SSH key format
        if ! ssh-keygen -l -f /tmp/ssh_key >/dev/null 2>&1; then
          echo "❌ Invalid SSH key format in secrets!"
          echo "🔍 SSH key should be a complete private key including:"
          echo "  -----BEGIN OPENSSH PRIVATE KEY-----"
          echo "  (key content)"
          echo "  -----END OPENSSH PRIVATE KEY-----"
          exit 1
        fi
        
        echo "✅ SSH key format validated"
        
        # Add server to known hosts with timeout
        timeout 10 ssh-keyscan -H ${{ steps.get-ip.outputs.instance-ip }} >> ~/.ssh/known_hosts 2>/dev/null || {
          echo "⚠️ SSH keyscan failed, but continuing..."
        }
        
        # Test SSH connection with detailed error reporting
        echo "🔍 Testing SSH connection..."
        if ssh -i /tmp/ssh_key -o StrictHostKeyChecking=no -o ConnectTimeout=10 -o UserKnownHostsFile=/dev/null ubuntu@${{ steps.get-ip.outputs.instance-ip }} "echo 'SSH connection successful at $(date)'"; then
          echo "✅ SSH connection successful!"
        else
          SSH_EXIT_CODE=$?
          echo "❌ SSH connection failed with exit code: $SSH_EXIT_CODE"
          echo "🔍 Troubleshooting info:"
          echo "  - Server IP: ${{ steps.get-ip.outputs.instance-ip }}"
          echo "  - SSH key fingerprint: $(ssh-keygen -l -f /tmp/ssh_key 2>/dev/null || echo 'Unable to read key')"
          echo "  - Connection test with verbose output:"
          ssh -i /tmp/ssh_key -o StrictHostKeyChecking=no -o ConnectTimeout=10 -v ubuntu@${{ steps.get-ip.outputs.instance-ip }} "echo 'test'" 2>&1 | head -20 || true
          exit 1
        fi
    
    - name: Deploy to EC2
      env:
        SERVER_IP: ${{ steps.get-ip.outputs.instance-ip }}
        SERVER_USER: ubuntu
        INSTANCE_ID: i-0f4af27f7d4b2ee8d
      run: |
        # Test basic connectivity first
        echo "🔍 Testing basic connectivity to server..."
        ssh -i /tmp/ssh_key -o StrictHostKeyChecking=no ubuntu@$SERVER_IP "echo 'Server connection successful - $(date)'"
        
        # Upload deployment package
        echo "📤 Uploading files to server..."
        if ! scp -i /tmp/ssh_key -o StrictHostKeyChecking=no -o ConnectTimeout=30 mydigitalspace-deploy.tar.gz ubuntu@$SERVER_IP:/tmp/; then
          echo "❌ Failed to upload deployment package!"
          echo "🔍 Checking if file exists locally:"
          ls -la mydigitalspace-deploy.tar.gz
          exit 1
        fi
        echo "✅ Deployment package uploaded successfully"
        
        # Execute deployment on remote server
        echo "🏗️ Setting up application on server..."
        if ! ssh -i /tmp/ssh_key -o StrictHostKeyChecking=no -o ConnectTimeout=60 ubuntu@$SERVER_IP << 'REMOTE_COMMANDS'
        
        set -e  # Exit on any error
        set -x  # Print commands as they execute
        
        echo "🔍 Starting remote deployment at $(date)"
        cd /tmp
        
        # Extract deployment package
        echo "📦 Extracting deployment package..."
        rm -rf mydigitalspace-deploy
        if ! tar -xzf mydigitalspace-deploy.tar.gz; then
            echo "❌ Failed to extract deployment package!"
            exit 1
        fi
        
        echo "✅ Deployment package extracted successfully"
        ls -la mydigitalspace-deploy/ | head -10
        
        # Sync files to application directory
        sudo mkdir -p /var/www/MyDigitalSpace
        sudo rsync -av --delete mydigitalspace-deploy/ /var/www/MyDigitalSpace/ --exclude=deploy-server.sh
        
        # Verify version.json was deployed
        echo "🔍 Verifying version.json deployment..."
        if [ -f /var/www/MyDigitalSpace/version.json ]; then
            echo "✅ version.json found in deployment"
            cat /var/www/MyDigitalSpace/version.json
        else
            echo "❌ version.json missing from deployment!"
            echo "📋 Files in deployment directory:"
            ls -la /var/www/MyDigitalSpace/
            echo "📋 Files in temp directory:"
            ls -la mydigitalspace-deploy/
        fi
        
        # Run deployment script
        chmod +x mydigitalspace-deploy/deploy-server.sh
        ./mydigitalspace-deploy/deploy-server.sh
        
        # Cleanup
        rm -rf /tmp/mydigitalspace-deploy*
        
        echo "✅ Remote deployment completed successfully at $(date)"
        
        REMOTE_COMMANDS; then
          echo "✅ Deployment executed successfully!"
        else
          echo "❌ Remote deployment failed!"
          echo "🔍 Checking server status..."
          ssh -i /tmp/ssh_key -o StrictHostKeyChecking=no ubuntu@$SERVER_IP "ps aux | grep -E '(nginx|node|pm2)' | head -10" || true
          exit 1
        fi
        
        # Cleanup local files
        rm -f /tmp/ssh_key
        
        echo "✅ GitHub Actions deployment completed!"
        echo "🌐 Your application is available at: http://$SERVER_IP"
    
    - name: Verify deployment
      run: |
        # Wait for service to be ready
        echo "⏳ Waiting for service to stabilize..."
        sleep 20
        
        SERVER_IP="${{ steps.get-ip.outputs.instance-ip }}"
        echo "🔍 Testing deployment at: http://$SERVER_IP"
        
        # Test version.json endpoint specifically
        echo "🔍 Testing version.json deployment..."
        if curl -f -m 10 "http://$SERVER_IP/version.json" | jq -r '.version' 2>/dev/null; then
          echo "✅ Version.json successfully deployed and accessible!"
        else
          echo "⚠️ Version.json test failed, checking response:"
          curl -s "http://$SERVER_IP/version.json" | head -5 || echo "No response received"
        fi
        
        # Continue with other endpoint tests
        
        # Test health endpoint with retries
        echo "🏥 Testing health endpoint..."
        for i in {1..5}; do
            if curl -f -m 10 "http://$SERVER_IP/health"; then
                echo "✅ Health check passed on attempt $i"
                break
            elif curl -f -m 10 "http://$SERVER_IP:3001/health"; then
                echo "✅ Direct backend health check passed on attempt $i"
                break
            else
                echo "⚠️ Health check attempt $i failed, retrying..."
                sleep 5
                if [ $i -eq 5 ]; then
                    echo "❌ All health check attempts failed!"
                    exit 1
                fi
            fi
        done
        
        # Test API endpoint
        echo "🔌 Testing API endpoint..."
        if curl -s -m 10 "http://$SERVER_IP/api" | jq -r '.message' | grep -q "KnowledgeHub"; then
            echo "✅ API endpoint responding correctly"
        else
            echo "⚠️ API endpoint check failed - checking response:"
            curl -s -m 10 "http://$SERVER_IP/api" || echo "No response received"
        fi
        
        # Test homepage
        echo "🏠 Testing homepage..."
        if curl -s -m 10 "http://$SERVER_IP/" | grep -q "AI-Powered Engineer"; then
            echo "✅ Homepage shows updated content"
        else
            echo "⚠️ Homepage may still show old content (cache issue)"
        fi
        
        echo "🎉 Deployment verification completed!"
    
    - name: Deployment notification
      if: always()
      run: |
        echo "📋 GitHub Actions Deployment Report"
        echo "====================================="
        if [ "${{ job.status }}" == "success" ]; then
          echo "🎉 DEPLOYMENT SUCCESSFUL!"
          echo ""
          echo "📊 Deployment Details:"
          echo "🌐 Application URL: http://${{ steps.get-ip.outputs.instance-ip }}"
          echo "🔗 WorkflowHub: http://${{ steps.get-ip.outputs.instance-ip }}/#workflow"
          echo "🔗 KnowledgeHub: http://${{ steps.get-ip.outputs.instance-ip }}/#knowledge"  
          echo "🔗 API Root: http://${{ steps.get-ip.outputs.instance-ip }}/api/"
          echo "📱 Instance ID: i-0f4af27f7d4b2ee8d"
          echo "🏷️ Git Commit: ${{ github.sha }}"
          echo "👤 Triggered by: ${{ github.actor }}"
          echo ""
          echo "✅ Enhanced Features Deployed:"
          echo "  - Role-based workflow permissions (admin-only editing)"
          echo "  - Public workflow viewing for all users"
          echo "  - Improved database schema with workflow tables"
          echo "  - Enhanced deployment monitoring and rollback"
          echo "  - Comprehensive error handling and logging"
          echo ""
          echo "📋 Next Steps:"
          echo "  - Test workflow creation as admin user"
          echo "  - Verify public users can view but not edit workflows"
          echo "  - Check deployment logs at: /var/log/mydigitalspace/deployment.log"
          
        else
          echo "❌ DEPLOYMENT FAILED!"
          echo ""
          echo "🔍 Troubleshooting Steps:"
          echo "1. Check GitHub Actions logs for specific error details"
          echo "2. SSH to server: ssh -i ~/.ssh/id_rsa ubuntu@${{ steps.get-ip.outputs.instance-ip }}"
          echo "3. Check deployment logs: tail -f /var/log/mydigitalspace/deployment.log"
          echo "4. Check PM2 status: pm2 status"
          echo "5. Check application logs: pm2 logs mydigitalspace-backend"
          echo ""
          echo "📞 Rollback available at backup directory on server"
          echo "🔧 Manual fixes may be required - check server status"
        fi
        echo "====================================="